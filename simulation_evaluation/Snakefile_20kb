#!/usr/bin/env python

import os
import random
from tqdm import tqdm
import numpy as np
import json
import pyfastaq
import pandas as pd
import json
import glob
import statistics
import matplotlib.pyplot as plt

# Define the parameters
AMR_allele_file = "AMR_alleles_unified.fa"
output_dir = 'simulations_20kb_r10'
badread_length = "20000,19215.5"
seed = 42  # Seed for reproducibility
# Set the seed for random and numpy
random.seed(seed)
np.random.seed(seed)

SAMPLES = [os.path.basename(f).replace(".fasta", "").replace(".fa", "") for f in glob.glob("AMR_contexts/*")]
DEPTHS = [5, 10, 20, 40, 80]

def aggregate_outputs(wildcards):
    return expand(os.path.join(output_dir, "amira" + "_{depth}", "{sample}"), depth=DEPTHS, sample=SAMPLES)

def aggregate_stats(wildcards):
    return expand(os.path.join(output_dir, "summary_stats", "{sample}"), sample=SAMPLES)

def aggregate_assems(wildcards):
    return expand(os.path.join("simulated_assemblies", "{sample}.fasta"), sample=SAMPLES)

def aggregate_flye(wildcards):
    return expand(os.path.join(output_dir, "AMRFP_flye" + "_{depth}", "{sample}", "AMR_finder_plus_results.tsv"), depth=DEPTHS, sample=SAMPLES)

def aggregate_unicycler(wildcards):
    return expand(os.path.join(output_dir, "AMRFP_unicycler" + "_{depth}", "{sample}", "AMR_finder_plus_results.tsv"), depth=DEPTHS, sample=SAMPLES)

# Define the workflow
rule all:
    input:
        aggregate_assems,
        aggregate_flye,
        aggregate_amira

# Snakemake rule for simulating assemblies
rule simulate_assembly:
    input:
        reference_genome="reference_genome.fasta",
        reference_plasmid="reference_plasmid.fasta",
        context_fasta= lambda wildcards: os.path.join("AMR_contexts", wildcards.sample + ".fasta")
    output:
        os.path.join('simulated_assemblies', "{sample}.fasta")
    params:
        allele_file=AMR_allele_file
    conda: "envs/simulate_assembly.yaml"
    shell:
        "python3 /home/dander/Documents/GitHub/amira_paper/simulation_evaluation/scripts/simulate_assemblies.py --context-fasta {input.context_fasta} --allele-file {params.allele_file} --output {output}"

rule simulate_r_10_reads:
    input:
        assembly=os.path.join("simulated_assemblies", "{sample}.fasta")
    output:
        os.path.join(output_dir, "reads" + "_{depth}", "{sample}_1.fastq")
    resources:
        mem_mb=30000, threads=1
    threads: 1
    params:
        sim_depth="{depth}",
        mean_length=badread_length
    conda: "envs/badread.yaml"    
    shell:
        "badread simulate --seed 2024 --length {params.mean_length} --error_model nanopore2023 --qscore_model nanopore2023 --reference {input.assembly} --quantity {params.sim_depth}x > {output}"

rule run_amira:
    input:
        readfile=os.path.join(output_dir, "reads" + "_{depth}", "{sample}_1.fastq")
    output:
        directory(os.path.join(output_dir, "amira" + "_{depth}", "{sample}"))
    threads: 5
    resources:
        mem_mb=lambda wildcards, attempt: 50000 * attempt, threads=5, runtime=7200
    params:
        panRG="AMR_supplemented_panRG.k15.w5.panidx.zip",
        species="Escherichia_coli"
    shell:
        "singularity run amira.img amira --pandora-path /hps/nobackup/iqbal/dander/Amira_truth_evaluation/software/pandora-linux-precompiled-v0.12.0-alpha.0 --reads {input.readfile} --output {output} --species {params.species} --cores {threads} --panRG-path {params.panRG}"

rule flye_assemble:
    input:
        readfile=os.path.join(output_dir, "reads" + "_{depth}", "{sample}_1.fastq")
    output:
        directory(os.path.join(output_dir, "flye" + "_{depth}", "{sample}"))
    threads: 4
    resources:
        mem_mb=100000
    conda: "envs/flye.yaml"
    shell:
        "flye -g 5M -o {output} -t {threads} -i 2 --nano-raw {input.readfile}"

rule run_amrfp_on_flye:
    input:
        os.path.join(output_dir, "flye" + "_{depth}", "{sample}")
    output:
        outdir=directory(os.path.join(output_dir, "AMRFP_flye" + "_{depth}", "{sample}")),
        outfile=os.path.join(output_dir, "AMRFP_flye" + "_{depth}", "{sample}", "AMR_finder_plus_results.tsv")
    threads: 4
    resources:
        mem_mb=15000
    shell:
        "mkdir -p {output.outdir} && amrfinder -n {input}/assembly.fasta -o {output.outfile} -t {threads} --plus --organism Escherichia"
