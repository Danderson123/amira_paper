import glob
import os
import pandas as pd
import json
import sys
import matplotlib.pyplot as plt
import seaborn as sns
import statistics

NANOPORE_SAMPLES = [os.path.basename(f).split(".fastq.gz")[0] for f in glob.glob("nanopore_reads/*.fastq.gz") ]
output_dir = "evaluation_results"

if not os.path.exists(output_dir):
    os.mkdir(output_dir)

def aggregate_flye_nanopore(wildcards):
    return expand(os.path.join(output_dir, "AMR_finder_plus_results.flye_v2.9.3_nanopore_only_assemblies", "{nanopore_sample}"), nanopore_sample=NANOPORE_SAMPLES)

def aggregate_amira(wildcards):
    return expand(os.path.join(output_dir, "Amira_v0.6.4_output", "{nanopore_sample}"), nanopore_sample=NANOPORE_SAMPLES)

def aggregate_amira_no_filtering(wildcards):
    return expand(os.path.join(output_dir, "Amira_v0.6.4_output.no_filtering", "{nanopore_sample}"), nanopore_sample=NANOPORE_SAMPLES)

def aggregate_truth(wildcards):
    return expand(os.path.join(output_dir, "true_gene_content", "{nanopore_sample}"), nanopore_sample=NANOPORE_SAMPLES)

rule all:
    input:
        aggregate_amira,
        aggregate_amira_no_filtering,
        aggregate_flye_nanopore,
        aggregate_truth

rule flye_assemble:
    input:
        reads=lambda wildcards: os.path.join("nanopore_reads", wildcards.nanopore_sample + ".fastq.gz")
    output:
        directory(os.path.join(output_dir, "flye_v2.9.3_nanopore_only_assemblies", "{nanopore_sample}"))
    threads: 4
    resources:
        mem_mb=60000
    conda: "envs/flye.yaml"
    shell:
        "flye -g 5M -o {output} -t {threads} --nano-raw {input}"

rule run_amrfp_on_flye:
    input:
        os.path.join(output_dir, "flye_v2.9.3_nanopore_only_assemblies", "{nanopore_sample}")
    output:
        outdir=directory(os.path.join(output_dir, "AMR_finder_plus_results.flye_v2.9.3_nanopore_only_assemblies", "{nanopore_sample}")),
        outfile=os.path.join(output_dir, "AMR_finder_plus_results.flye_v2.9.3_nanopore_only_assemblies", "{nanopore_sample}", "AMR_finder_plus_results.tsv")
    threads: 4
    resources:
        mem_mb=15000
    shell:
        "mkdir -p {output.outdir} && amrfinder -n {input}/assembly.fasta -o {output.outfile} -t {threads} --plus --organism Klebsiella_pneumoniae"

rule run_amira:
    input:
        reads=lambda wildcards: os.path.join("nanopore_reads", wildcards.nanopore_sample + ".fastq.gz")
    output:
        sample_output=directory(os.path.join(output_dir, "Amira_v0.6.4_output", "{nanopore_sample}"))
    threads: 4
    resources: mem_mb=40000
    params:
        panRG="Klebsiella.pneumoniae.panidx.zip",
        species="Klebsiella_pneumoniae"
    shell:
        "singularity run amira.img amira --reads {input.reads} --output {output.sample_output} --species {params.species} --cores {threads} --panRG-path {params.panRG}"

rule run_amira_no_filtering:
    input:
        reads=lambda wildcards: os.path.join("nanopore_reads", wildcards.nanopore_sample + ".fastq.gz")
    output:
        sample_output=directory(os.path.join(output_dir, "Amira_v0.6.4_output.no_filtering", "{nanopore_sample}"))
    threads: 4
    resources: mem_mb=40000
    params:
        panRG="Klebsiella.pneumoniae.panidx.zip",
        species="Klebsiella_pneumoniae"
    shell:
        "singularity run amira.img amira --no-filtering --reads {input.reads} --output {output.sample_output} --species {params.species} --cores {threads} --panRG-path {params.panRG}"

rule get_true_gene_content:
    input:
        reads=lambda wildcards: os.path.join("nanopore_reads", wildcards.nanopore_sample + ".fastq.gz"),
        AMR_reference="AMR_alleles_unified.fa"
    output:
        sample_output=directory(os.path.join(output_dir, "true_gene_content", "{nanopore_sample}"))
    threads: 4
    resources: mem_mb=30000, threads=4
    conda: "envs/make_truth.yaml"
    shell:
        "mkdir -p {output.sample_output} && python3 scripts/get_true_AMR_genes.py --reads {input.reads} --reference {input.AMR_reference} --output {output.sample_output}"
